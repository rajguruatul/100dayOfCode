Selenium Waits:
---------------------------------------------------

WAIT interface -> FluentWait class -> WebDriverWait class 

---------------------------------------------------
A) Thread.sleep :
---------------------------------------------------
Syntax: 
Thread.sleep(3000);

1)Thread is a class in JAVA.
2)sleep() is a static method of Thread class so we can use it using class name i.e. Thread.
3)Thread.sleep causes the current thread to suspend execution for a specified period.
4)sleep() methods accept duration in miliseconds. ( 1 s= 1000 ms).
5)It throws  IllegalArgumentException – if the value of millis is negative.
6)sleep() throws a checked exception which we must either throw or handle it using try catch.
7)Syntax: Thread.sleep(3000);
8)It is a static wait. Execution will be on hold till specified time.

---------------------------------------------------
B) ImplicitWait
---------------------------------------------------

Syntax:
driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

1) Implicit wait specifies the amount of time the driver should wait when searching for an element if it is not immediately present. 
2) If we set implicit wait as 10 seconds and element is found in 5 seconds, driver will NOT wait for remaining 5 seconds
3) Thread.sleep() should be used for every element , where user needs to wait
4) But with Implicit wait - if used once - it will be applicable to all calls of findElemnt() and findElements() methods.
5) implicitlyWait() method sets the timeout for driver not for an individual element.
6) If a list of web elements appears with some delay, implicitly wait will not let WebDriver wait till all elements are displayed. 
   It returns as soon as it finds the first element.

---------------------------------------------------

C) ExplicitWait
---------------------------------------------------
Syntax:

WebDriver driver= new ChromeDriver();
WebDriverWait wait= new WebDriverWait(driver, 30);
WebElement Element= wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("Some Expression"))));
Element.click();


1) WebDriverWait is a class. We can create an object of it by passing WebDriver instance and timeout in seconds.
2) WebDriverWait will ignore instances of NotFoundException that are encountered (thrown) by default in the ‘until’ condition, and immediately propagate all others. You can add more to the ignore list by calling ignoring(exceptions to add).
3) Unlike implicit wait, explicit wait is not for entire webdriver session.
4) Unlike implicit wait, you need to write explicit wait every time whenever you need it as it is specific to a web element.
5) No need to create object of WebDriverWait again and again if you want similar timeout . If you need another timeout duration or driver instance, go for new instance of WebDriverWait.
6) We can specify timeout only in seconds. Other units of time are not possible.
7) You can reduce test execution time by using explicit wait.

8) We can customized polling time or ignore other exceptions as well using WebDriverWait instance. For example:
	WebDriverWait wait= new WebDriverWait(driver, 30);
	wait.pollingEvery(1, TimeUnit.MICROSECONDS);
	wait.ignoring(ElementNotVisibleException.class);
	
	
In order to declare explicit wait, one has to use “ExpectedConditions”. The following Expected Conditions can be used in Explicit Wait.

	alertIsPresent()
	elementSelectionStateToBe()
	elementToBeClickable()
	elementToBeSelected()
	frameToBeAvaliableAndSwitchToIt()
	invisibilityOfTheElementLocated()
	invisibilityOfElementWithText()
	presenceOfAllElementsLocatedBy()
	presenceOfElementLocated()
	textToBePresentInElement()
	textToBePresentInElementLocated()
	textToBePresentInElementValue()
	titleIs()
	titleContains()
	visibilityOf()
	visibilityOfAllElements()
	visibilityOfAllElementsLocatedBy()
	visibilityOfElementLocated()
	
---------------------------------------------------
D) FluentWait:
---------------------------------------------------


  // Waiting 30 seconds for an element to be present on the page, checking
   // for its presence once every 5 seconds.
   Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
       .withTimeout(30, SECONDS)
       .pollingEvery(5, SECONDS)
       .ignoring(NoSuchElementException.class);



Syntax1 :

WebElement foo = wait.until(new Function<WebDriver, WebElement>() {
     public WebElement apply(WebDriver driver) {
       return driver.findElement(By.id("foo"));
     }
   });
   
   
Stnatx2:

String text= wait.until(new Function<WebDriver, String>() {
	public String apply(WebDriver driver) {
         return driver.findElement(By.id("foo")).getText();
     }
  });
  
  
  WHERE WE SHOULD USE FLUENTWAIT?
  
When you do not find suitable expected wait condition in explicit wait.
To handle dynamic web elements.
You need to do more then just waiting.
When you need to create your own customized wait conditions.

------------------------------------------------------------------------------------------------------